#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Jan 31 10:48:54 2010


import math, time, sys, os, re
import wxversion
import wx, wx.richtext, wx.grid
import threading

# begin wxGlade: extracode
# end wxGlade

# For IPC, we need to pass messages by stderr because stdout is buffered.
# But we still want to show errors, so we'll point stderr to stdout.
sys.stdout = sys.__stderr__
sys.stderr = sys.__stdout__

class SimGUI_Frame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SimGUI_Frame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER|wx.SP_LIVE_UPDATE)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.sizer_2_copy_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Status Log")
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.bitmap_map = wx.StaticBitmap(self.window_1_pane_1, -1, wx.NullBitmap)
        self.text_ctrl_sim_log = wx.richtext.RichTextCtrl(self.window_1_pane_2, -1, "", style=wx.TE_MULTILINE)
        self.button_sim_startPause = wx.Button(self.window_1_pane_2, -1, "Start")
        self.button_sim_log_clear = wx.Button(self.window_1_pane_2, -1, "Clear Log")
        self.button_sim_log_export = wx.Button(self.window_1_pane_2, -1, "Export Log...")
        self.label_1 = wx.StaticText(self.window_1_pane_2, -1, "Show log messages for:")
        self.checkbox_statusLog_targetRegion = wx.CheckBox(self.window_1_pane_2, -1, "Target region announcements")
        self.checkbox_statusLog_propChange = wx.CheckBox(self.window_1_pane_2, -1, "System proposition changes")
        self.checkbox_statusLog_border = wx.CheckBox(self.window_1_pane_2, -1, "Region border crossings")
        self.checkbox_statusLog_other = wx.CheckBox(self.window_1_pane_2, -1, "Other debugging messages")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onSimStartPause, self.button_sim_startPause)
        self.Bind(wx.EVT_BUTTON, self.onSimClear, self.button_sim_log_clear)
        self.Bind(wx.EVT_BUTTON, self.onSimExport, self.button_sim_log_export)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.onResize, self.window_1)
        # end wxGlade

        # Make status bar at bottom.

        self.sb = wx.StatusBar(self)
        self.SetStatusBar(self.sb)
        self.sb.SetFieldsCount(1)
        self.sb.SetStatusText("PAUSED")

        self.button_sim_log_export.Enable(False)

        # Create new thread to communicate with subwindow
        print >>sys.__stdout__, "(GUI) Starting controller listen thread..."
        self.controllerListenThread = threading.Thread(target = self.controllerListen)
        self.controllerListenThread.start()

        # Let everyone know we're ready
        print "Hello!"

    def setMapImage(self, filename):
        # Load and display the Map
        self.originalMap = wx.Image(filename, wx.BITMAP_TYPE_PNG)
        self.onResize()
        self.Bind(wx.EVT_SIZE, self.onResize, self)

    def controllerListen(self):
        """
        Processes messages from the controller, and updates the GUI accordingly
        """

        ############################
        # CONTROLLER LISTEN THREAD #
        ############################

        while 1: 
            # Wait for and receive a message from the controller
            input = sys.stdin.readline()
            if input == '':  # EOF indicates that the connection has been destroyed
                print "Controller listen thread is shutting down."
                break

            input = input.strip()

            # Update stuff (should put these in rough order of frequency for optimal speed
            if input.startswith("Running at"):
                wx.CallAfter(self.sb.SetStatusText, input, 0)
            elif input.startswith("POSE:"):
                [x,y] = map(float, input.split(":")[1].split(","))
                [x,y] = map(int, (self.mapScale*x, self.mapScale*y)) 
                wx.CallAfter(self.drawRobot, x, y)
            elif input.startswith("PAUSE"):
                # FIXME: Sometimes we'll still get rate updates AFTER a pause
                wx.CallAfter(self.sb.SetStatusText, input, 0)
            elif input.startswith("Output proposition"):
                if self.checkbox_statusLog_propChange.GetValue():
                    wx.CallAfter(self.appendLog, input + "\n", color="GREEN") 
            elif input.startswith("Heading to"):
                if self.checkbox_statusLog_targetRegion.GetValue():
                    wx.CallAfter(self.appendLog, input + "\n", color="BLUE") 
            elif input.startswith("Crossed border"):
                if self.checkbox_statusLog_border.GetValue():
                    wx.CallAfter(self.appendLog, input + "\n", color="CYAN") 
            elif input.startswith("BG:"):
                wx.CallAfter(self.setMapImage, input.split(":")[1])
            else:
                if self.checkbox_statusLog_other.GetValue():
                    wx.CallAfter(self.appendLog, input + "\n", color="BLACK") 

    def __set_properties(self):
        # begin wxGlade: SimGUI_Frame.__set_properties
        self.SetTitle("Simulation Status")
        self.SetSize((836, 713))
        self.checkbox_statusLog_targetRegion.SetValue(1)
        self.checkbox_statusLog_propChange.SetValue(1)
        self.checkbox_statusLog_border.SetValue(1)
        self.checkbox_statusLog_other.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SimGUI_Frame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_43_copy_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.StaticBoxSizer(self.sizer_2_copy_staticbox, wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add((20, 30), 0, 0, 0)
        sizer_4.Add(self.bitmap_map, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_4)
        sizer_5.Add((20, 30), 0, 0, 0)
        sizer_43_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_2_copy.Add(self.text_ctrl_sim_log, 1, wx.ALL|wx.EXPAND, 2)
        sizer_43_copy_copy.Add(sizer_2_copy, 1, wx.EXPAND, 0)
        sizer_43_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_5.Add(sizer_43_copy_copy, 6, wx.EXPAND, 0)
        sizer_5.Add((20, 30), 0, 0, 0)
        sizer_43_copy_1.Add((20, 20), 0, 0, 0)
        sizer_43_copy_1.Add(self.button_sim_startPause, 0, wx.LEFT|wx.RIGHT|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_43_copy_1.Add((20, 20), 0, 0, 0)
        sizer_43_copy_1.Add(self.button_sim_log_clear, 0, wx.LEFT|wx.RIGHT|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_43_copy_1.Add((20, 20), 0, 0, 0)
        sizer_43_copy_1.Add(self.button_sim_log_export, 0, wx.LEFT|wx.RIGHT|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_43_copy_1.Add((20, 20), 0, 0, 0)
        sizer_3.Add((20, 40), 0, 0, 0)
        sizer_3.Add(self.label_1, 0, 0, 0)
        sizer_3.Add(self.checkbox_statusLog_targetRegion, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_3.Add(self.checkbox_statusLog_propChange, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_3.Add(self.checkbox_statusLog_border, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_3.Add(self.checkbox_statusLog_other, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_43_copy_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_43_copy_1, 3, wx.EXPAND, 0)
        sizer_5.Add((20, 30), 0, 0, 0)
        self.window_1_pane_2.SetSizer(sizer_5)
        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2)
        sizer_2.Add(self.window_1, 1, wx.EXPAND, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def onResize(self, event=None): # wxGlade: SimGUI_Frame.<event_handler>
        # Figure out scaling
        maximumWidth = self.bitmap_map.GetSize().x
        maximumHeight = self.bitmap_map.GetSize().y
        windowAspect = 1.0*maximumHeight/maximumWidth

        W = self.originalMap.GetWidth()
        H = self.originalMap.GetHeight()
        imgAspect = 1.0*H/W

        if imgAspect >= windowAspect:
            NewH = maximumHeight
            self.mapScale = 1.0*NewH/H
            NewW = W * self.mapScale
        else:
            NewW = maximumWidth
            self.mapScale = 1.0*NewW/W
            NewH = H * self.mapScale

        self.scaledMap = wx.BitmapFromImage(self.originalMap.Scale(NewW, NewH))

        # Set background
        self.bitmap_map.SetBitmap(self.scaledMap)

        if event is not None:
            event.Skip()

    def drawRobot(self, x, y):
        memory = wx.MemoryDC()
        size = self.scaledMap.GetSize()
        newMap = wx.EmptyBitmap(size.x, size.y)
        memory.SelectObject(newMap)

        memory.BeginDrawing()
        memory.DrawBitmap(self.scaledMap, 0, 0)
        memory.DrawCircle(x, y, 5)
        memory.EndDrawing()
        memory.SelectObject(wx.NullBitmap)
        self.bitmap_map.SetBitmap(newMap)

    def appendLog(self, text, color="BLACK"):
        # for printing everything on the log
        self.text_ctrl_sim_log.BeginTextColour(color)
        self.text_ctrl_sim_log.AppendText("["+time.strftime("%H:%M:%S", time.gmtime())+"] "+text)
        self.text_ctrl_sim_log.EndTextColour()
        self.text_ctrl_sim_log.ShowPosition(self.text_ctrl_sim_log.GetLastPosition())
        self.Refresh()

    def onSimStartPause(self, event): # wxGlade: SimGUI_Frame.<event_handler>
        btn_label = self.button_sim_startPause.GetLabel()
        if btn_label == "Start" or btn_label == "Resume":
            self.button_sim_log_export.Enable(False)
            print "START" # This goes to the controller
            self.appendLog("%s!\n" % btn_label,'GREEN')
            self.button_sim_startPause.SetLabel("Pause")
        else:
            print "PAUSE" # This goes to the controller
            self.appendLog('Pause...\n','RED')
            self.button_sim_log_export.Enable(True)
            self.button_sim_startPause.SetLabel("Resume")

        self.Refresh()
        event.Skip()

    def onSimExport(self, event): # wxGlade: SimGUI_Frame.<event_handler>
        """
        Ask the user for a filename to save the Log as, and then save it.
        """
        default = 'StatusLog'
    
        # Get a filename
        fileName = wx.FileSelector("Save File As", 
                                    os.path.join(os.getcwd(),'examples'),
                                    default_filename=default,
                                    default_extension="txt",
                                    wildcard="Status Log files (*.txt)|*.txt",
                                    flags = wx.SAVE | wx.OVERWRITE_PROMPT)
        if fileName == "": return # User cancelled.

        # Force a .txt extension.  How mean!!!
        if os.path.splitext(fileName)[1] != ".txt":
            fileName = fileName + ".txt"
        

        # Save data to the file
        self.saveFile(fileName)
        event.Skip()

    def saveFile(self, fileName):
        """
        Write all data out to a file.
        """

        if fileName is None:
            return

        f = open(fileName,'w')

        print >>f, "Experiment Status Log"
        print >>f
        # write the log
        print >>f, str(self.text_ctrl_sim_log.GetValue())

        f.close()

    def onSimClear(self, event): # wxGlade: SimGUI_Frame.<event_handler>
        self.text_ctrl_sim_log.Clear()
        event.Skip()


# end of class SimGUI_Frame




if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    simGUI_Frame = SimGUI_Frame(None, -1, "")
    app.SetTopWindow(simGUI_Frame)
    simGUI_Frame.Show()
    app.MainLoop()
