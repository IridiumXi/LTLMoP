=========================
TODO/FIXME Comment report
=========================


Generated on Sun, 21 Feb 2010 21:47:29 EST

Summary
=======

There are currently 40 TODO/FIXME comments.

Listing
=======

File : /calibrate.py:121

        # TODO: Allow for full affine transforms
        scale = (real_pts[:,0]-real_pts[:,1])/(file_pts[:,0]-file_pts[:,1])
        xscale = scale[0,0]
        yscale = scale[1,0]

File : /execute.py:156

    # TODO: implement NO-GUI option

    global runFSA, fd_gui_output, fd_gui_input, guiListenInitialized  # For sharing with thread


File : /execute.py:200

        print "WARNING: Initial region auto-detection not yet implemented" # TODO: determine initial region
        init_region = 0

    ### Have the FSA find a valid initial state

File : /execute.py:235

        # TODO: Possibly implement max rate-limiting?
        #while (toc - tic) < 0.05:
        #   time.sleep(0.01)
        #   toc = time.time()

File : /execute.py:244

            pose = proj.pose_handler.getPose()[0:2]  # TODO: cache?
            print "POSE:%d,%d" % tuple(map(int, proj.coordmap_lab2map(pose)))

            last_gui_update_time = time.time()

File : /fileMethods.py:50

    # FIXME: This file reading function is very fragile; we should catch exceptions
    f = open(fileName, "r")

    # A regex to search for sections

File : /fsa.py:386

        # TODO: Use the "last" controllers?
        
        inside = self.motion_handler.gotoRegion(self.current_region, self.next_region)


File : /fsa.py:392

            # TODO: Finish this check to see whether actually inside next region that we expected:
            #    # Check what region we're in.
            #    pt = rev_coordmap(wx.Point(px,py))
            #    for i, region in enumerate(rfi.regions):

File : /project.py:212

        # TODO: Complain nicely instead of just dying when this breaks?
        self.h_name = {}
        self.h_name['init'] = self.lab_data["InitializationHandler"]
        self.h_name['pose'] = self.lab_data["PoseHandler"][0]

File : /project.py:235

            # TODO: Is there a more elegant way to do this? This is pretty ugly...
            exec("from %s import initHandler as initHandler%d" % (handler, init_num)) in locals() # WARNING: This assumes our input data is not malicious...
            exec("self.init_handlers.append(initHandler%d(self, calib=calib))" % (init_num)) in locals()
            self.shared_data.update(self.init_handlers[-1].getSharedData())

File : /regionEditor.py:273

        # TODO: I guess the virtual size should scale according to background image,
        # but we don't want to shrink it too much when the image is small.
        self.drawPanel.SetVirtualSize((PAGE_WIDTH, PAGE_HEIGHT))
        self.drawPanel.SetScrollRate(20, 20)

File : /regionEditor.py:327

    # FIXME: These are really messy; refactor me

    def onToolIconClick(self, event):
        """ Respond to the user clicking on one of our tool icons.

File : /regionEditor.py:695

                            # TODO: because of the getObjectAt call,
                            # clicks outside the object will not be recognized
                            for i, face in enumerate(obj.getFaces()):
                                [d, pint] = pointLineIntersection(wx.Point(*face[0]), wx.Point(*face[1]), mousePt)

File : /regionEditor.py:752

            # TODO: Get rid of action variable in above
            self.createPoly(self.newPoints)
            self.mouseMode = mouse_NONE
            self.sb.SetStatusText("", 1)

File : /regionEditor.py:857

        # TODO: Make minimal/full an option settable via the GUI

        name, ext = os.path.splitext(os.path.basename(self.fileName))


File : /regionEditor.py:931

        # TODO: Alpha BG so you can make it lighter
        if self.backgroundImage != None:
            dc.DrawBitmap(self.backgroundImage, 0, 0, False)
        

File : /regionEditor.py:956

                # TODO: Better text placement algorithm for concave polygons?
                dc.SetBrush(wx.Brush(obj.color, wx.SOLID))
                dc.SetPen(wx.Pen(obj.color, 1, wx.SOLID))
                center = obj.getCenter()

File : /regionEditor.py:1816

            # TODO: Do preliminary, less-expensive checking first
            if obj.objectContainsPoint(pt.x, pt.y):
                return obj
        return None

File : /regionEditor.py:2145

        # TODO: Check to see if name already exists?
        
        return True


File : /simGUI.py:105

                # FIXME: Sometimes we'll still get rate updates AFTER a pause
                wx.CallAfter(self.sb.SetStatusText, input, 0)
            elif input.startswith("Output proposition"):
                if self.checkbox_statusLog_propChange.GetValue():

File : /specEditor.py:345

        # TODO: Update this part
        #if self.parent.subprocess[PROCESS_PLAYER] is not None \
        #or self.parent.subprocess[PROCESS_GAZEBO] is not None:
        #    wx.MessageBox("Please close the running simulation before calibrating.", "Error",

File : /specEditor.py:354

        # TODO: save the config first
        proc = subprocess.Popen(["python", "calibrate.py", fileNamePrefix + ".spec", self.list_box_experiment_name.GetStringSelection()],stderr=subprocess.PIPE)
        
        output = proc.stderr.readline().strip()

File : /specEditor.py:575

    # FIXME: Doesn't scroll on Windows???

    def __init__(self, parent, bitmap, *args, **kwds):
        self.parent = parent

File : /specEditor.py:631

    # TODO: Use the scintilla-style text editor. Select-all, search-replace, syntax highlighting, etc.

    def __init__(self, *args, **kwds):
        # begin wxGlade: SpecEditorFrame.__init__

File : /specEditor.py:896

        # TODO: Finish me

        event.Skip()


File : /specEditor.py:992

        # TODO: Make new window here?
        pass

        event.Skip()

File : /specEditor.py:1228

        # TODO: if self.dirty:
        if not self.askIfUserWantsToSave("closing"): return
        
        # Detach from any running subprocesses

File : /specEditor.py:1341

        # TODO: Catch errors here
        adjData = self.rfi.transitions

        createLTLfile(fileNamePrefix, sensorList, robotPropList, adjData, spec)

File : /specEditor.py:1362

        # TODO: Make this output live
        while cmd.poll():
            wx.Yield()


File : /specEditor.py:1398

        # TODO: Maybe we shouldn't be recalculating fileNamePrefix so much...
        fileNamePrefix = os.path.join(self.projectPath, self.projectName)

        if self.projectName is None or not os.path.isfile(fileNamePrefix+".aut"):

File : /specEditor.py:1402

            # TODO: Deal with case where aut file exists but is lame
            wx.MessageBox("Cannot find automaton for simulation.  Please make sure compilation completed successfully.", "Error",
                        style = wx.OK | wx.ICON_ERROR)
            return

File : /specEditor.py:1425

        # FIXME: Doesn't change size on Windows??
        self.Layout()

        # Spawn asynchronous subprocess

File : /specEditor.py:1483

            # TODO: Check exists & mtime to make sure it didn't die
            self.appendLog("Export complete!\n", "GREEN")
        else:
            print "Unknown PID"

File : /handlers/init/stage.py:48

                # TODO: Better handling of error cases
                break

    def getSharedData(self):

File : /handlers/motionControl/heatController.py:49

        # TODO: Account for last in cache

        if current in cache and next in cache[current]:
            return cache[current][next]

File : /handlers/motionControl/heatController.py:64

            # TODO: Account for non-determinacy?
            pt1, pt2 = self.rfi.transitions[current][next][0]
            
            # Find the index of this face

File : /handlers/motionControl/heatController.py:68

            # TODO: Why don't we just store this as the index?
            for i, face in enumerate([x for x in self.rfi.regions[current].getFaces()]):
                # Account for both face orientations...
                if (pt1 == face[0] and pt2 == face[1]) or (pt1 == face[1] and pt2 == face[0]):

File : /handlers/motionControl/heatControllerHelper.py:908

            # TODO: This is a silly if-else...
            if Bi[0,i] > 0:
                # The distance product in this zone 
                # should be negative, but it won't 

File : /handlers/sensor/SensorHandler.py:59

        # TODO: Button background colour doesn't show up very well
        if btn.GetValue():
            btn.SetBackgroundColour(wx.Colour(0, 255, 0)) 
        else:

File : /handlers/sensor/SensorHandler.py:106

        # TODO: Use plain threading like other parts of LTLMoP?
        if not self.waitingForInput:
            delayedresult.startWorker(self.updateFromInput, self.checkForInput)
            self.waitingForInput = True


